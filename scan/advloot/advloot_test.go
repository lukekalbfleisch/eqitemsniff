package advloot

import (
	"encoding/hex"
	"testing"

	"github.com/stretchr/testify/assert"
	"github.com/xackery/eqitemsniff/analyzer"
)

func TestAdvLoot(t *testing.T) {
	assert := assert.New(t)
	var err error
	packet := &analyzer.EQPacket{}
	packets := []string{
		"2e0019176223010100000046010000f1ffffff30f8ffff30f8ffff17622301020000000e01000002000000ddfeffffdffeffff176223010200000045010000ffffffffc2feffffc1feffff176223010200000014010000ffffffff2bffffff2affffff42c07003000000c4d8a7008d940400cb2900000200000014000000ded8a700b6940400cb290000020000001400000006d9a700de940400cb29000002000000140000000f6106060001d8030000000000000100c48258010084030000ed0c0000040000004775617264204d6561646f6d008d13000000000000070200000000000001000000000100000054776f2048616e6465642053776f72640000000000e857000000000000690400000000000064000000000100000049766f72790000000000e93c0100000000007103000000000000e803000000010000004e61747572616c205370696365730000000000a9850000000000000e03000000000000e803000000010000004e61747572616c2053696c6b00000000004c300c00000000002a0200000a000000150000004775617264204d6561646f6d277320636f7270736504000000313134320000000000000000000000000000000000000000000000000000000007f25d001e000000223c1eed0c00004e0f00000000000028000000ffffffff0a0000006a1a000000000000",
		"58001906c6544e0f030a20c51eea0c4e0f03ffffffff319001000bd7a33c0080f243000000000080810000176223010100000046010000f1ffffff30f8ffff30f8ffff17622301020000000e01000002000000dffeffffe1feffff176223010200000045010000ffffffffc1feffffc0feffff176223010200000014010000ffffffff2affffff29ffffff42c07003000000c4d8a7008d940400cb2900000200000015000000ded8a700b6940400cb290000020000001500000006d9a700de940400cb29000002000000150000000f610606000175130000000000000100a88258010084030000ea0c0000030000004775617264205769736e7977008d13000000000000070200000000000001000000000100000054776f2048616e6465642053776f72640000000000ea2d000000000000c703000000000000e8030000000100000052756e65206f662074686520436f6d62696e6500000000003f880000000000007a07000000000000e803000000010000004d616c6c6561626c65204c6f616d00000000004c300c00000000002a0200000a000000150000004775617264205769736e7977277320636f7270736504000000313134320000000000000000000000000000000000000000000000000000000007f25d001e000000",
		"990019308734d90c4e0f6e000000000000000000803f0000000000a0a54300000000e70000000000000000b4d900006e0000000020c51ed90c4e0f03ffffffffbbf700000000000000a0a543000000000000000000176223010100000046010000f1ffffff30f8ffff30f8ffff17622301020000000e01000002000000e7feffffe9feffff176223010200000045010000ffffffffbdfeffffbcfeffff176223010200000014010000ffffffff26ffffff25ffffff42c07003000000c4d8a7008d940400cb2900000200000019000000ded8a700b6940400cb290000020000001900000006d9a700de940400cb29000002000000190000000f61060600015b000000000000000100718258010084030000d90c0000020000004775617264204a6173736f6e6700e857000000000000690400000000000064000000000100000049766f727900000000004c2e0000000000006503000000000000e80300000001000000576f726473206f6620446573637279696e6700000000004d300c00000000002a0200000a000000160000004775617264204a6173736f6e67277320636f7270736504000000313134320000000000000000000000000000000000000000000000000000000007f25d001e000000223c1ed90c00004e0f0000000000002a000000ffffffff03000000bbf7000000000000",
	}
	for _, p := range packets {
		packet.Data, err = hex.DecodeString(p)
		if !assert.NoError(err) {
			t.Fatal(err)
		}
		advloot := Scan(packet)
		t.Log(advloot)
	}
	//t.Fatal("done")
}
